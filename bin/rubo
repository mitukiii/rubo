#!/usr/bin/env ruby
# coding: utf-8

lib = File.expand_path('../../lib', __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'optparse'
require 'rubo'

options = {
  adapter: ENV['RUBO_ADAPTER'] || :shell,
  alias:   ENV['RUBO_ALIAS']   || false,
  plugins: ENV['RUBO_PLUGINS'] || nil,
  name:    ENV['RUBO_NAME']    || 'Rubo',
}

opts = OptionParser.new do |opts|
  opts.banner = 'Usage rubo [options]'

  opts.on('-a', '--adapter [ADAPTER]', 'The Adapter to use') do |v|
    options[:adapter] = v
  end

  opts.on('-c', '--create [PATH]', 'Create a deployable rubo') do |v|
    options[:create] = v
  end

  opts.on('-l', '--alias [ALIAS]', 'Enable replacing the robot\'s name with alias') do |v|
    options[:alias] = v || '/'
  end

  opts.on('-n', '--name [NAME]', 'The name of the robot in chat') do |v|
    options[:name] = v
  end

  opts.on('-r', '--require [PATH]', 'Alternative plugins path') do |v|
    options[:plugins] ||= ''
    options[:plugins] += ',' + v.to_s
  end

  opts.on_tail('-h', '--help', 'Display the help information') do |v|
    options[:help] = true
  end

  opts.on_tail('-v', '--version', 'Displays the version of rubo installed') do |v|
    options[:version] = true
  end
end

opts.parse!(ARGV)

if options[:help]
  puts opts
  exit
end

if options[:version]
  require 'rubo/version'
  puts "Rubo version: #{Rubo::VERSION}"
  exit
end

if options[:create]
  require 'rubo/creator'
  creator = Rubo::Creator.new(options[:create])
  creator.run
  exit
end

Rubo.load_external_gems

robot = Rubo.load_bot(
  options[:adapter],
  options[:name],
)

robot.alias_name = options[:alias]

robot.adapter.once(:connected) do
  robot.load_plugins('plugins')
  if options[:plugins]
    plugins = options[:plugins].split(',').reject(&:empty?)
    robot.load_plugins(plugins)
  end
end

robot.run
